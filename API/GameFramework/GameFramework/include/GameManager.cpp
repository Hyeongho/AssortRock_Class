#include "GameManager.h"
#include "Timer.h"
#include "Input.h"
#include "Scene/SceneManager.h"
#include "Scene/MainScene.h"

CGameManager* CGameManager::m_Inst = nullptr;
bool CGameManager::m_Loop = true;

CGameManager::CGameManager() : m_Timer(nullptr)
{
}

CGameManager::~CGameManager()
{
    CSceneManager::DestroyInst();

    CInput::DestroyInst();

    SAFE_DELETE(m_Timer);

    ReleaseDC(m_hWnd, m_hDC);
}

bool CGameManager::Init(HINSTANCE hInst)
{
	m_hInst = hInst;

    m_RS.Width = 1280;
    m_RS.Height = 720;

	Register();
	Create();

    // DC를 생성한다.
    m_hDC = GetDC(m_hWnd);

    // 입력관리자 초기화
    if (!CInput::GetInst()->Init())
    {
        return false;
    }

    // 장면관리자 초기화
    if (!CSceneManager::GetInst()->Init())
    {
        return false;
    }

    CSceneManager::GetInst()->CreateScene<CMainScene>();

    // 타이머를 생성한다.
    m_Timer = new CTimer;

	return true;
}

int CGameManager::Run()
{
    MSG msg;

    // 기본 메시지 루프입니다:

    /*
        윈도우의 메세지 루프입니다. GetMessage 함수를 이용해서 메세지 큐에 있는 메세지를 얻어올 수 있다.
        만약 메세지큐에 아직 메세지가 없다면 메세지가 들어올때까지 이 함수에서 안빠져나오고 대기상태로 들어가있게 된다.
        즉, 메세지가 생길때까지 다른작업을 할 수 없다는 의미이다.
        GetMessage 함수는 만약 윈도우 종료메세지가 들어올 경우 while문을 빠져나갈 수 있게 FALSE가 나오게 된다.
    */
    while (m_Loop)
    {
        // GetMessage는 메세지가 없을 경우 다른일을 할 수 없다.
        // 메세지가 올때까지 대기하고 있는 시간을 윈도우의 데드타임이라고 한다.
        // 실제로 메세지가 있는 시간보다 없는 시간이 훨씬 길다.
        // 그래서 게임은 윈도우의 데드타임동안 게임이 동작될 수 있게 제작한다.
        // PeekMessage는 메세지큐에서 메세지를 얻어온다.
        // 그런데 만약 메세지가 없다면 false를 리턴하면서 바로 빠져나오고
        // 메세지가 있다면 true를 리턴하면서 해당 메세지를 꺼내온다
        if (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))
        {
            // WM_KEYDOWN 이라는 메세지가 있다. 이는 키보드 키를 눌렀을때 발생되는 메세지이다.
            // TranslateMessage 함수에서는 메세지를 전달해주면 WM_KEYDOWN 인지를 판단해주고
            // 눌려진 키가 문자 키인지를 판단해거 인반 문자 키라면 WM_CHAR라는 메시지를 만들어서 메세지 큐에 추가해주게 된다.
            TranslateMessage(&msg);

            // DIspatchMessage 함수는 메세지를 윈도우 프록시저로 보내준다.
            DispatchMessage(&msg);
        }

        // 윈도우가 데드타임일 경우 여기로 들어오게 된다.
        else
        {
            Logic();
        }
    }

    return (int)msg.wParam;
}

void CGameManager::Logic()
{
    float DeltaTime = m_Timer->Update();

    // 입력 업데이트
    CInput::GetInst()->Update(DeltaTime);

    Update(DeltaTime);
    PostUpdate(DeltaTime);
    Collision(DeltaTime);
    Render(DeltaTime);
}

bool CGameManager::Update(float DeltaTime)
{
    return CSceneManager::GetInst()->Update(DeltaTime);
}

bool CGameManager::PostUpdate(float DeltaTime)
{
    return CSceneManager::GetInst()->Update(DeltaTime);
}

bool CGameManager::Collision(float DeltaTime)
{
    return CSceneManager::GetInst()->Update(DeltaTime);
}

void CGameManager::Render(float DeltaTime)
{
    CSceneManager::GetInst()->Render(m_hDC);
}

ATOM CGameManager::Register()
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    // 작업영역이 바뀔때 다시 크리게끔 해준다. 가로와 세로 모두 다시 그린다.
    wcex.style = CS_HREDRAW | CS_VREDRAW;

    // 메세지가 큐에 들어왔을때 해당 메세지를 꺼내오고 꺼내온 메세지를 인자로 전달해서 호출해줄 함수를 지정한다.
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;

    // window Instance를 지정한다.
    wcex.hInstance = m_hInst;

    // 실행파일이 만들어질때 사용할 아이콘 이미지를 지정한다.
    wcex.hIcon = LoadIcon(m_hInst, MAKEINTRESOURCE(IDI_ICON1));
    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName = nullptr;
    // 유니코드 문자열을 사용할때 L"" 을 붙여서 사용을 한다.
    // TEXT 매크로는 "" 앞에 L 을 붙여서 L"" 만들어준다.
    // 유니코드일때는 이렇게 해주고 multibyte 일때는 그냥 "" 로 만들어준다.
    wcex.lpszClassName = TEXT("GameFramework");
    wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_ICON1));

    return RegisterClassExW(&wcex);
}

BOOL CGameManager::Create()
{
    m_hWnd = CreateWindowW(TEXT("GameFramework") , TEXT("GameFramework"), WS_OVERLAPPEDWINDOW,
        100, 100, 1280, 720, nullptr, nullptr, m_hInst, nullptr);

    if (!m_hWnd)
    {
        return FALSE;
    }

    // 클라이언트 영역을 1280, 720으로 만들어준다.
    // RECT: 사각형을 표현하는 구조체이다.
    // left, top, right, bottom 4개의 값으로 구성되어 있다.
    RECT rc = { 0, 0, m_RS.Width, m_RS.Height };

    // 1번인자: 클라이언트 영역의 크기를 전달한다.
    // 이 함수가 완료되면 rc에는 실제 클라이언트 영역이 원하는 크기 될 수 있는
    // 전체 윈도우의 left, top, right, bottom 정보가 들어오게 된다.
    AdjustWindowRect(&rc, WS_OVERLAPPEDWINDOW, FALSE);

    // 위에서 얻어온 Rect를 이용해서 윈도우 크기를 지정한다.
    SetWindowPos(m_hWnd, HWND_TOPMOST, 1920, 100, rc.right - rc.left, rc.bottom - rc.top, SWP_NOMOVE);

    // SW_SHOW: 윈도우창을 화면에 보여준다.
    // SW_HIDE: 창을 만들긴 하지만 화면에 보여주는건 아니다.
    ShowWindow(m_hWnd, SW_SHOW);

    // UpdateWindow 함수는 갱신할 부분이 있다면 갱신하라는 명령을 내려주는 함수다.
    UpdateWindow(m_hWnd);

    return TRUE;
}

LRESULT CGameManager::WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_PAINT:
    {
        PAINTSTRUCT ps;

        // HDC: 화면에 출력하기 위한 그리기 도구이다.
        HDC hdc = BeginPaint(hWnd, &ps);     

        EndPaint(hWnd, &ps);
    }
    break;
    case WM_DESTROY:
        m_Loop = false;
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}
