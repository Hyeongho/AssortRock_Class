#include <iostream>

int main()
{
	/*
		포인터: 메모리에 공간을 만들면 반드시 주소가 부여된다.
		모든 변수 타입은 포인터 타입을 가질 수 있다.
		포인터 타입의 변수는 해당 타입의 메모리 주소를 가질 수 있다.
		int Number; 를 선언했을때 주소가 1000번지라면 int의 포인터 타입 변수에 Number의 주소인 1000번지를 저장할 수 있는 것이다.
	*/

	/*	
		x86으로 개발을 하게 되면 32bit
		*64로 개발을 하게되면 64bit
		 
		32bit에서는 메모리 주소가 16진수 8자리로 표현되고 64bit 에서는 메모리주소가 16진수 16자리로 표현된다.

		포인터 타입의 변수는 메모리 주소를 저장하는 변수이므로 어떤 타입의 포인터 변수라도 무조건 32bit에서는 4바이트 64bit에서는 8바이트만큼의 공간을 차지하게 된다.

		포인터 변수가 다른 변수의 메모리 주소를 저장하게 된다면 해당 주소에 접근하여 값을 얻어오거나 변경할 수 있게 된다.
		이를 역참조 라고 한다.

		역참조는 포인터 변수 앞에 *을 붙여서 해당 포인터 변수가 가지고 있는 주소에 접근할 수 있다.
	*/

	/*
		포인터와 배열의 관계

		배열명은 포인터다. 배열의 이름은 해당 배열이 할당된 메모리의 시작주소를 의미한다.
	*/

	/*
		포인터 연산: +, - 2가지를 제공한다.
		포인터 연산은 1을 더한다고 해서 무조건 메모리 주소가 1이 증가하는 개념이 아니다.

		포인터 변수에 1을 더해주게 된다면 해당 변수타입의 케모리의 크기만큼 증가하게 된다.
		int 포인터일 경우 4바이트가 증가하게 되고 __int64 포인터라면 8바이트가 증가하게 된다
	*/

	return 0;
}